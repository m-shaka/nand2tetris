// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field Array items;
    field int nextPos;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        if (maxLength > 0) {
            let items = Array.new(maxLength);
            let nextPos = 0;
        }
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        if (nextPos > 0) {
            do items.dispose();
        }
        do Memory.deAlloc(this);
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return nextPos;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return items[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let items[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        let items[nextPos] = c;
        let nextPos = nextPos + 1;
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        let nextPos = nextPos - 1;
        let items[nextPos] = null;
        return;
    }

    /** Returns the integer value of this string,
     *  until a non-digit character is detected. */
    method int intValue() {
        var int i, v;
        var char c;
        var bool isNeg;
        let i = 0;
        let v = 0;
        let isNeg = charAt(0) = 45;
        if (isNeg) {
            let i = 1;
        }
        while (i < length()) {
            let c = charAt(i);
            if (((c - 47) > 0) & (58 - c > 0)) {
                let v = (10 * v) + (c - 48);
                let i = i + 1;
            } else {
                let i = length();
            }
        }
        if (isNeg) {
            let v = -v;
        }
        return v;
    }

    method void setInt_(int val) {
        var int lastDigit, c;
        var String res;
        let lastDigit = val - ((val / 10) * 10);
        let c = 48 + lastDigit;
        if (val < 10) {
            do appendChar(c);
            return;
        }
        do setInt_(val / 10);
        do appendChar(c);
        return;
    }
    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        var bool isNeg;
        let isNeg = val < 0;
        if (isNeg) {
            let items[0] = 45;
            let nextPos = 1;
        } else {
            let nextPos = 0;
        }
        do setInt_(Math.abs(val));
        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
