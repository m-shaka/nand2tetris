// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on
 * the screen is indexed (0,0).
 */
class Screen {
    static bool isBlack;
    static int screenBase;
    static Array twoToThe;

    /** Initializes the Screen. */
    function void init() {
        var int i, n;
        let isBlack = true;
        let screenBase = 16384;
        let twoToThe = Array.new(16);
        let i = 0;
        let n = 1;
        while (i < 16) {
            let twoToThe[i] = n;
            let i = i + 1;
            let n = n + n;
        }
        return;

    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var int i;
        let i = 0;
        while (i < 8192) {
            do Memory.poke(Memory.peek(screenBase + i), 0);
            let i = i + 1;
        }
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let isBlack = b;
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int bit, mem, currentVal;
        let bit = x;
        while (bit > 15) {
            let bit = bit - 16;
        }
        let mem = screenBase + (32 * y) + (x / 16);
        let currentVal = Memory.peek(mem);
        if (isBlack) {
            do Memory.poke(mem, currentVal | twoToThe[bit]);
        } else {
            do Memory.poke(mem, currentVal & ~twoToThe[bit]);
        }
        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int dx, dy, a, b, diff, aSign, bSign;
        let a = 0;
        let b = 0;
        let aSign = 1;
        let bSign = 1;
        let dx = x2 - x1;
        let dy = y2 - y1;
        if (dx < 0) {
            let aSign = -1;
        }
        if (dy < 0) {
            let bSign = -1;
        }
        let dx = Math.abs(dx);
        let dy = Math.abs(dy);
        let diff = 0;
        if ((dx = 0) & (dy = 0)) {
            do Screen.drawPixel(x1, y1);
            return;
        }
        while (
            (~(a > dx) | (dx = 0)) &
            (~(b > dy) | (dy = 0))
        ) {
            do Screen.drawPixel(x1 + (aSign * a), y1 + (bSign * b));
            if (diff < 0) {
                let a = a + 1;
                let diff = diff + dy;
            } else {
                let b = b + 1;
                let diff = diff - dx;
            }
        }
        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        var int i, iSign, dy, diff;
        let dy = y2 - y1;
        let i = 0;
        let iSign = 1;
        if (dy < 0) {
            let iSign = -1;
        }
        let dy = Math.abs(dy);
        while (~(i > dy)) {
            let diff = iSign * i;
            do Screen.drawLine(x1, y1 + diff, x2, y1 + diff);
            let i = i + 1;
        }
        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int dy, tempR, r2;
        if (r > 181) {
            return;
        }
        let dy = -r;
        let r2 = r * r;
        while (dy < (r + 1)) {
            let tempR = Math.sqrt(r2 - (dy * dy));
            do Screen.drawLine(x - tempR, y + dy, x + tempR, y + dy);
            let dy = dy + 1;
        }
        return;
    }
}
