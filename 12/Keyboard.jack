// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Keyboard.jack

/**
 * A library for handling user input from the keyboard.
 */
class Keyboard {
    static int keyAdress;

    /** Initializes the keyboard. */
    function void init() {
        let keyAdress = 24576;
        return;
    }

    /**
     * Returns the character of the currently pressed key on the keyboard;
     * if no key is currently pressed, returns 0.
     *
     * Recognizes all ASCII characters, as well as the following keys:
     * new line = 128 = String.newline()
     * backspace = 129 = String.backspace()
     * left arrow = 130
     * up arrow = 131
     * right arrow = 132
     * down arrow = 133
     * home = 134
     * End = 135
     * page up = 136
     * page down = 137
     * insert = 138
     * delete = 139
     * ESC = 140
     * F1 - F12 = 141 - 152
     */
    function char keyPressed() {
        return Memory.peek(keyAdress);
    }

    /**
     * Waits until a key is pressed on the keyboard and released,
     * then echoes the key to the screen, and returns the character
     * of the pressed key.
     */
    function char readChar() {
        var char pressed;
        let pressed = 0;
        while (pressed = 0) {
            let pressed = Keyboard.keyPressed();
        }
        while (~(Keyboard.keyPressed() = 0)) {

        }
        do Output.printChar(pressed);
        return pressed;
    }

    /**
     * Displays the message on the screen, reads from the keyboard the entered
     * text until a newline character is detected, echoes the text to the screen,
     * and returns its value. Also handles user backspaces.
     */
    function String readLine(String message) {
        var int capacity, i;
        var char c;
        var String res, tmpStr;
        do Output.printString(message);
        let c = 0;
        let capacity = 1;
        let res = String.new(capacity);
        while (true) {
            let c = Keyboard.readChar();
            if (c = String.newLine()) {
                do Output.println();
                return res;
            }
            if ((c = String.backSpace()) & (res.length() > 0)) {
                do res.eraseLastChar();
                if (capacity > (res.length() * 3)) {
                    let capacity = Math.max(capacity / 3, 1);
                    let tmpStr = res;
                    let res = String.new(capacity);
                    let i = 0;
                    while (i < tmpStr.length()) {
                        do res.appendChar(tmpStr.charAt(i));
                        let i = i + 1;
                    }
                    do tmpStr.dispose();
                }
            } else {
                if (capacity = res.length()) {
                    let capacity = capacity + capacity;
                    let tmpStr = res;
                    let res = String.new(capacity);
                    let i = 0;
                    while (i < tmpStr.length()) {
                        do res.appendChar(tmpStr.charAt(i));
                        let i = i + 1;
                    }
                    do tmpStr.dispose();
                }
                do res.appendChar(c);
            }
        }
        return res;
    }

    /**
     * Displays the message on the screen, reads from the keyboard the entered
     * text until a newline character is detected, echoes the text to the screen,
     * and returns its integer value (until the first non-digit character in the
     * entered text is detected). Also handles user backspaces.
     */
    function int readInt(String message) {
        var String s;
        let s = Keyboard.readLine(message);
        return s.intValue();
    }
}
