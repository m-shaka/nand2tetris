// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {
    static Array twoToThe;

    /** Initializes the library. */
    function void init() {
        var int i;
        let twoToThe = Array.new(16);
        while (i < 16) {
            if (i = 0) {
                let twoToThe[i] = 1;
            } else {
                let twoToThe[i] = twoToThe[i-1] + twoToThe[i-1];
            }
            let i = i + 1;
        }
        return;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if (x < 0) {
            return -x;
        }
        return x;
    }

    /** Returns the product of x and y.
     *  When a Jack compiler detects the multiplication operator '*' in the
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        var int shiftedX, sum, i;
        let sum = 0;
        let shiftedX = x;
        let i = 0;
        while (i < 16) {
            if (Math.bit(y, i)) {
                let sum = sum + shiftedX;
            }
            let shiftedX = shiftedX + shiftedX;
            let i = i + 1;
        }
        return sum;
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
        var int q, absX, absY;
        var bool isSameSign;
        let q = 0;
        let absX = Math.abs(x);
        let absY = Math.abs(y);
        let isSameSign = ((x > -1) & (y > -1)) | ((x < 0) & (y < 0));
        if (absX < absY) {
            return 0;
        }
        let q = Math.divide(absX, absY + absY);
        if ((absX - ((q + q) * absY)) < absY) {
            if (isSameSign) {
                return q + q;
            }
            return -(q + q);
        }
        if (isSameSign) {
            return q + q + 1;
        }
        return -(q + q + 1);
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        var int y, i, tmp;
        let y = 0;
        let i = 7;
        while (i > -1) {
            let tmp = y + twoToThe[i];
            let tmp = tmp * tmp;
            if (((tmp - 1) < x) & (tmp > 0)) {
                let y = y + twoToThe[i];
            }
            let i = i - 1;
        }
        return y;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        if (a > b) {
            return a;
        }
        return b;
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        if (a < b) {
            return a;
        }
        return b;
    }

    function bool bit(int x, int j) {
        return (x & twoToThe[j]) = twoToThe[j];
    }
}
